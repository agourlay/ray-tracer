<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (674 samples, 0.28%)</title><rect x="1.1158%" y="181" width="0.2780%" height="15" fill="rgb(227,0,7)"/><text x="1.3658%" y="191.50"></text></g><g><title>ray-tracer`alloc::slice::_&lt;impl [T]&gt;::repeat (661 samples, 0.27%)</title><rect x="1.5551%" y="181" width="0.2727%" height="15" fill="rgb(217,0,24)"/><text x="1.8051%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (661 samples, 0.27%)</title><rect x="1.5551%" y="165" width="0.2727%" height="15" fill="rgb(221,193,54)"/><text x="1.8051%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (2,014 samples, 0.83%)</title><rect x="1.8319%" y="181" width="0.8308%" height="15" fill="rgb(248,212,6)"/><text x="2.0819%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (756 samples, 0.31%)</title><rect x="2.3508%" y="165" width="0.3118%" height="15" fill="rgb(208,68,35)"/><text x="2.6008%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (267 samples, 0.11%)</title><rect x="2.9147%" y="149" width="0.1101%" height="15" fill="rgb(232,128,0)"/><text x="3.1647%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (496 samples, 0.20%)</title><rect x="2.8272%" y="165" width="0.2046%" height="15" fill="rgb(207,160,47)"/><text x="3.0772%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (410 samples, 0.17%)</title><rect x="3.5920%" y="133" width="0.1691%" height="15" fill="rgb(228,23,34)"/><text x="3.8420%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,340 samples, 0.97%)</title><rect x="3.0318%" y="165" width="0.9652%" height="15" fill="rgb(218,30,26)"/><text x="3.2818%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,672 samples, 0.69%)</title><rect x="3.3073%" y="149" width="0.6897%" height="15" fill="rgb(220,122,19)"/><text x="3.5573%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (572 samples, 0.24%)</title><rect x="3.7611%" y="133" width="0.2359%" height="15" fill="rgb(250,228,42)"/><text x="4.0111%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (296 samples, 0.12%)</title><rect x="4.8356%" y="133" width="0.1221%" height="15" fill="rgb(240,193,28)"/><text x="5.0856%" y="143.50"></text></g><g><title>ray-tracer`ray_tracer::intersection::Intersection::hit (458 samples, 0.19%)</title><rect x="4.7704%" y="149" width="0.1889%" height="15" fill="rgb(216,20,37)"/><text x="5.0204%" y="159.50"></text></g><g><title>ray-tracer`ray_tracer::light::Light::lighting (1,134 samples, 0.47%)</title><rect x="4.9594%" y="149" width="0.4678%" height="15" fill="rgb(206,188,39)"/><text x="5.2094%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (422 samples, 0.17%)</title><rect x="5.7332%" y="133" width="0.1741%" height="15" fill="rgb(217,207,13)"/><text x="5.9832%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (406 samples, 0.17%)</title><rect x="6.0863%" y="117" width="0.1675%" height="15" fill="rgb(231,73,38)"/><text x="6.3363%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (351 samples, 0.14%)</title><rect x="6.1090%" y="101" width="0.1448%" height="15" fill="rgb(225,20,46)"/><text x="6.3590%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (852 samples, 0.35%)</title><rect x="5.9073%" y="133" width="0.3514%" height="15" fill="rgb(210,31,41)"/><text x="6.1573%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (514 samples, 0.21%)</title><rect x="7.1122%" y="101" width="0.2120%" height="15" fill="rgb(221,200,47)"/><text x="7.3622%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,113 samples, 1.28%)</title><rect x="6.2587%" y="133" width="1.2841%" height="15" fill="rgb(226,26,5)"/><text x="6.5087%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,044 samples, 0.84%)</title><rect x="6.6997%" y="117" width="0.8431%" height="15" fill="rgb(249,33,26)"/><text x="6.9497%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (530 samples, 0.22%)</title><rect x="7.3242%" y="101" width="0.2186%" height="15" fill="rgb(235,183,28)"/><text x="7.5742%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (578 samples, 0.24%)</title><rect x="7.6080%" y="133" width="0.2384%" height="15" fill="rgb(221,5,38)"/><text x="7.8580%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (342 samples, 0.14%)</title><rect x="7.8633%" y="133" width="0.1411%" height="15" fill="rgb(247,18,42)"/><text x="8.1133%" y="143.50"></text></g><g><title>ray-tracer`__rdl_dealloc (268 samples, 0.11%)</title><rect x="8.1764%" y="133" width="0.1105%" height="15" fill="rgb(241,131,45)"/><text x="8.4264%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (257 samples, 0.11%)</title><rect x="8.3546%" y="101" width="0.1060%" height="15" fill="rgb(249,31,29)"/><text x="8.6046%" y="111.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (319 samples, 0.13%)</title><rect x="8.3311%" y="133" width="0.1316%" height="15" fill="rgb(225,111,53)"/><text x="8.5811%" y="143.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (278 samples, 0.11%)</title><rect x="8.3480%" y="117" width="0.1147%" height="15" fill="rgb(238,160,17)"/><text x="8.5980%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (1,672 samples, 0.69%)</title><rect x="9.5083%" y="117" width="0.6897%" height="15" fill="rgb(214,148,48)"/><text x="9.7583%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1,720 samples, 0.71%)</title><rect x="16.8242%" y="69" width="0.7095%" height="15" fill="rgb(232,36,49)"/><text x="17.0742%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (22,572 samples, 9.31%)</title><rect x="10.9137%" y="101" width="9.3107%" height="15" fill="rgb(209,103,24)"/><text x="11.1637%" y="111.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (21,395 samples, 8.83%)</title><rect x="11.3992%" y="85" width="8.8252%" height="15" fill="rgb(229,88,8)"/><text x="11.6492%" y="95.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (6,477 samples, 2.67%)</title><rect x="17.5527%" y="69" width="2.6717%" height="15" fill="rgb(213,181,19)"/><text x="17.8027%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2,548 samples, 1.05%)</title><rect x="19.1734%" y="53" width="1.0510%" height="15" fill="rgb(254,191,54)"/><text x="19.4234%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (24,422 samples, 10.07%)</title><rect x="10.1980%" y="117" width="10.0738%" height="15" fill="rgb(241,83,37)"/><text x="10.4480%" y="127.50">libsystem_mallo..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (301 samples, 0.12%)</title><rect x="20.2718%" y="117" width="0.1242%" height="15" fill="rgb(233,36,39)"/><text x="20.5218%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3,738 samples, 1.54%)</title><rect x="21.2300%" y="101" width="1.5419%" height="15" fill="rgb(226,3,54)"/><text x="21.4800%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3,288 samples, 1.36%)</title><rect x="21.4157%" y="85" width="1.3563%" height="15" fill="rgb(245,192,40)"/><text x="21.6657%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (5,961 samples, 2.46%)</title><rect x="20.3960%" y="117" width="2.4589%" height="15" fill="rgb(238,167,29)"/><text x="20.6460%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3,847 samples, 1.59%)</title><rect x="28.7691%" y="85" width="1.5868%" height="15" fill="rgb(232,182,51)"/><text x="29.0191%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (20,447 samples, 8.43%)</title><rect x="22.8548%" y="117" width="8.4342%" height="15" fill="rgb(231,60,39)"/><text x="23.1048%" y="127.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (12,596 samples, 5.20%)</title><rect x="26.0933%" y="101" width="5.1957%" height="15" fill="rgb(208,69,12)"/><text x="26.3433%" y="111.50">libsys..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2,262 samples, 0.93%)</title><rect x="30.3560%" y="85" width="0.9331%" height="15" fill="rgb(235,93,37)"/><text x="30.6060%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,179 samples, 0.49%)</title><rect x="31.5184%" y="117" width="0.4863%" height="15" fill="rgb(213,116,39)"/><text x="31.7684%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (347 samples, 0.14%)</title><rect x="32.5995%" y="101" width="0.1431%" height="15" fill="rgb(222,207,29)"/><text x="32.8495%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (853 samples, 0.35%)</title><rect x="32.7629%" y="85" width="0.3519%" height="15" fill="rgb(206,96,30)"/><text x="33.0129%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (819 samples, 0.34%)</title><rect x="32.7769%" y="69" width="0.3378%" height="15" fill="rgb(218,138,4)"/><text x="33.0269%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (290 samples, 0.12%)</title><rect x="32.9951%" y="53" width="0.1196%" height="15" fill="rgb(250,191,14)"/><text x="33.2451%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (904 samples, 0.37%)</title><rect x="32.7426%" y="101" width="0.3729%" height="15" fill="rgb(239,60,40)"/><text x="32.9926%" y="111.50"></text></g><g><title>ray-tracer`&lt;ray_tracer::sphere::Sphere as ray_tracer::shape::Shape&gt;::local_intersect (2,711 samples, 1.12%)</title><rect x="32.0047%" y="117" width="1.1183%" height="15" fill="rgb(206,27,48)"/><text x="32.2547%" y="127.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (671 samples, 0.28%)</title><rect x="33.1230%" y="117" width="0.2768%" height="15" fill="rgb(225,35,8)"/><text x="33.3730%" y="127.50"></text></g><g><title>ray-tracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (77,788 samples, 32.09%)</title><rect x="4.0375%" y="165" width="32.0868%" height="15" fill="rgb(250,213,24)"/><text x="4.2875%" y="175.50">ray-tracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as c..</text></g><g><title>ray-tracer`ray_tracer::world::World::intersect_with_ray (74,349 samples, 30.67%)</title><rect x="5.4560%" y="149" width="30.6682%" height="15" fill="rgb(247,123,22)"/><text x="5.7060%" y="159.50">ray-tracer`ray_tracer::world::World::intersect_wi..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (66,867 samples, 27.58%)</title><rect x="8.5423%" y="133" width="27.5820%" height="15" fill="rgb(231,138,38)"/><text x="8.7923%" y="143.50">ray-tracer`ray_tracer::shape::Shape::interse..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (6,589 samples, 2.72%)</title><rect x="33.4063%" y="117" width="2.7179%" height="15" fill="rgb(231,145,46)"/><text x="33.6563%" y="127.50">ra..</text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (2,228 samples, 0.92%)</title><rect x="35.2052%" y="101" width="0.9190%" height="15" fill="rgb(251,118,11)"/><text x="35.4552%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (271 samples, 0.11%)</title><rect x="36.6918%" y="149" width="0.1118%" height="15" fill="rgb(217,147,25)"/><text x="36.9418%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (362 samples, 0.15%)</title><rect x="37.5255%" y="133" width="0.1493%" height="15" fill="rgb(247,81,37)"/><text x="37.7755%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (733 samples, 0.30%)</title><rect x="40.7709%" y="85" width="0.3024%" height="15" fill="rgb(209,12,38)"/><text x="41.0209%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9,951 samples, 4.10%)</title><rect x="37.9846%" y="117" width="4.1047%" height="15" fill="rgb(227,1,9)"/><text x="38.2346%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (9,382 samples, 3.87%)</title><rect x="38.2193%" y="101" width="3.8700%" height="15" fill="rgb(248,47,43)"/><text x="38.4693%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2,438 samples, 1.01%)</title><rect x="41.0836%" y="85" width="1.0057%" height="15" fill="rgb(221,10,30)"/><text x="41.3336%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (957 samples, 0.39%)</title><rect x="41.6945%" y="69" width="0.3948%" height="15" fill="rgb(210,229,1)"/><text x="41.9445%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10,762 samples, 4.44%)</title><rect x="37.6748%" y="133" width="4.4392%" height="15" fill="rgb(222,148,37)"/><text x="37.9248%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (1,751 samples, 0.72%)</title><rect x="42.5620%" y="117" width="0.7223%" height="15" fill="rgb(234,67,33)"/><text x="42.8120%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1,543 samples, 0.64%)</title><rect x="42.6478%" y="101" width="0.6365%" height="15" fill="rgb(247,98,35)"/><text x="42.8978%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (2,817 samples, 1.16%)</title><rect x="42.1614%" y="133" width="1.1620%" height="15" fill="rgb(247,138,52)"/><text x="42.4114%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,512 samples, 0.62%)</title><rect x="46.0261%" y="101" width="0.6237%" height="15" fill="rgb(213,79,30)"/><text x="46.2761%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8,971 samples, 3.70%)</title><rect x="43.3234%" y="133" width="3.7004%" height="15" fill="rgb(246,177,23)"/><text x="43.5734%" y="143.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (5,001 samples, 2.06%)</title><rect x="44.9610%" y="117" width="2.0629%" height="15" fill="rgb(230,62,27)"/><text x="45.2110%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (907 samples, 0.37%)</title><rect x="46.6498%" y="101" width="0.3741%" height="15" fill="rgb(216,154,8)"/><text x="46.8998%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (635 samples, 0.26%)</title><rect x="47.1320%" y="133" width="0.2619%" height="15" fill="rgb(244,35,45)"/><text x="47.3820%" y="143.50"></text></g><g><title>ray-tracer`ray_tracer::intersection::Intersection::prepare_computations (29,001 samples, 11.96%)</title><rect x="36.2088%" y="165" width="11.9626%" height="15" fill="rgb(251,115,12)"/><text x="36.4588%" y="175.50">ray-tracer`ray_tra..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::normal_at (26,961 samples, 11.12%)</title><rect x="37.0503%" y="149" width="11.1211%" height="15" fill="rgb(240,54,50)"/><text x="37.3003%" y="159.50">ray-tracer`ray_t..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (1,727 samples, 0.71%)</title><rect x="47.4591%" y="133" width="0.7124%" height="15" fill="rgb(233,84,52)"/><text x="47.7091%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (644 samples, 0.27%)</title><rect x="47.9058%" y="117" width="0.2656%" height="15" fill="rgb(207,117,47)"/><text x="48.1558%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (600 samples, 0.25%)</title><rect x="48.7345%" y="149" width="0.2475%" height="15" fill="rgb(249,43,39)"/><text x="48.9845%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (533 samples, 0.22%)</title><rect x="49.2369%" y="133" width="0.2199%" height="15" fill="rgb(209,38,44)"/><text x="49.4869%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (462 samples, 0.19%)</title><rect x="49.2662%" y="117" width="0.1906%" height="15" fill="rgb(236,212,23)"/><text x="49.5162%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1,183 samples, 0.49%)</title><rect x="48.9820%" y="149" width="0.4880%" height="15" fill="rgb(242,79,21)"/><text x="49.2320%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (621 samples, 0.26%)</title><rect x="50.6084%" y="117" width="0.2562%" height="15" fill="rgb(211,96,35)"/><text x="50.8584%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4,146 samples, 1.71%)</title><rect x="49.4700%" y="149" width="1.7102%" height="15" fill="rgb(253,215,40)"/><text x="49.7200%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,774 samples, 1.14%)</title><rect x="50.0359%" y="133" width="1.1442%" height="15" fill="rgb(211,81,21)"/><text x="50.2859%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (765 samples, 0.32%)</title><rect x="50.8646%" y="117" width="0.3156%" height="15" fill="rgb(208,190,38)"/><text x="51.1146%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (858 samples, 0.35%)</title><rect x="51.2626%" y="149" width="0.3539%" height="15" fill="rgb(235,213,38)"/><text x="51.5126%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (446 samples, 0.18%)</title><rect x="51.6297%" y="149" width="0.1840%" height="15" fill="rgb(237,122,38)"/><text x="51.8797%" y="159.50"></text></g><g><title>ray-tracer`__rdl_alloc (340 samples, 0.14%)</title><rect x="51.9387%" y="149" width="0.1402%" height="15" fill="rgb(244,218,35)"/><text x="52.1887%" y="159.50"></text></g><g><title>ray-tracer`__rdl_dealloc (409 samples, 0.17%)</title><rect x="52.0790%" y="149" width="0.1687%" height="15" fill="rgb(240,68,47)"/><text x="52.3290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,939 samples, 0.80%)</title><rect x="52.4457%" y="101" width="0.7998%" height="15" fill="rgb(210,16,53)"/><text x="52.6957%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,841 samples, 0.76%)</title><rect x="52.4861%" y="85" width="0.7594%" height="15" fill="rgb(235,124,12)"/><text x="52.7361%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (619 samples, 0.26%)</title><rect x="52.9901%" y="69" width="0.2553%" height="15" fill="rgb(224,169,11)"/><text x="53.2401%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (256 samples, 0.11%)</title><rect x="53.1399%" y="53" width="0.1056%" height="15" fill="rgb(250,166,2)"/><text x="53.3899%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,047 samples, 0.84%)</title><rect x="52.4081%" y="117" width="0.8444%" height="15" fill="rgb(242,216,29)"/><text x="52.6581%" y="127.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,343 samples, 0.97%)</title><rect x="52.3025%" y="149" width="0.9665%" height="15" fill="rgb(230,116,27)"/><text x="52.5525%" y="159.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (2,170 samples, 0.90%)</title><rect x="52.3739%" y="133" width="0.8951%" height="15" fill="rgb(228,99,48)"/><text x="52.6239%" y="143.50"></text></g><g><title>ray-tracer`alloc::slice::merge_sort (260 samples, 0.11%)</title><rect x="53.2776%" y="149" width="0.1072%" height="15" fill="rgb(253,11,6)"/><text x="53.5276%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (2,413 samples, 1.00%)</title><rect x="54.8010%" y="133" width="0.9953%" height="15" fill="rgb(247,143,39)"/><text x="55.0510%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2,561 samples, 1.06%)</title><rect x="65.2312%" y="85" width="1.0564%" height="15" fill="rgb(236,97,10)"/><text x="65.4812%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (33,101 samples, 13.65%)</title><rect x="56.7896%" y="117" width="13.6538%" height="15" fill="rgb(233,208,19)"/><text x="57.0396%" y="127.50">libsystem_malloc.dyli..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31,415 samples, 12.96%)</title><rect x="57.4850%" y="101" width="12.9584%" height="15" fill="rgb(216,164,2)"/><text x="57.7350%" y="111.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9,972 samples, 4.11%)</title><rect x="66.3301%" y="85" width="4.1134%" height="15" fill="rgb(220,129,5)"/><text x="66.5801%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4,166 samples, 1.72%)</title><rect x="68.7250%" y="69" width="1.7184%" height="15" fill="rgb(242,17,10)"/><text x="68.9750%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35,640 samples, 14.70%)</title><rect x="55.7963%" y="133" width="14.7012%" height="15" fill="rgb(242,107,0)"/><text x="56.0463%" y="143.50">libsystem_malloc.dylib..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (429 samples, 0.18%)</title><rect x="70.4975%" y="133" width="0.1770%" height="15" fill="rgb(251,28,31)"/><text x="70.7475%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5,414 samples, 2.23%)</title><rect x="71.8764%" y="117" width="2.2332%" height="15" fill="rgb(233,223,10)"/><text x="72.1264%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (4,722 samples, 1.95%)</title><rect x="72.1619%" y="101" width="1.9478%" height="15" fill="rgb(215,21,27)"/><text x="72.4119%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`free (8,579 samples, 3.54%)</title><rect x="70.6744%" y="133" width="3.5388%" height="15" fill="rgb(232,23,21)"/><text x="70.9244%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (251 samples, 0.10%)</title><rect x="74.1096%" y="117" width="0.1035%" height="15" fill="rgb(244,5,23)"/><text x="74.3596%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5,681 samples, 2.34%)</title><rect x="82.8330%" y="101" width="2.3434%" height="15" fill="rgb(226,81,46)"/><text x="83.0830%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (29,868 samples, 12.32%)</title><rect x="74.2132%" y="133" width="12.3203%" height="15" fill="rgb(247,70,30)"/><text x="74.4632%" y="143.50">libsystem_malloc.d..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (18,857 samples, 7.78%)</title><rect x="78.7551%" y="117" width="7.7783%" height="15" fill="rgb(212,68,19)"/><text x="79.0051%" y="127.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (3,290 samples, 1.36%)</title><rect x="85.1763%" y="101" width="1.3571%" height="15" fill="rgb(240,187,13)"/><text x="85.4263%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (257 samples, 0.11%)</title><rect x="86.5631%" y="133" width="0.1060%" height="15" fill="rgb(223,113,26)"/><text x="86.8131%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,773 samples, 0.73%)</title><rect x="86.8337%" y="133" width="0.7313%" height="15" fill="rgb(206,192,2)"/><text x="87.0837%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (459 samples, 0.19%)</title><rect x="88.2956%" y="117" width="0.1893%" height="15" fill="rgb(241,108,4)"/><text x="88.5456%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (719 samples, 0.30%)</title><rect x="88.5006%" y="101" width="0.2966%" height="15" fill="rgb(247,173,49)"/><text x="88.7506%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (691 samples, 0.29%)</title><rect x="88.5121%" y="85" width="0.2850%" height="15" fill="rgb(224,114,35)"/><text x="88.7621%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (278 samples, 0.11%)</title><rect x="88.6825%" y="69" width="0.1147%" height="15" fill="rgb(245,159,27)"/><text x="88.9325%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (759 samples, 0.31%)</title><rect x="88.4849%" y="117" width="0.3131%" height="15" fill="rgb(245,172,44)"/><text x="88.7349%" y="127.50"></text></g><g><title>ray-tracer`&lt;ray_tracer::sphere::Sphere as ray_tracer::shape::Shape&gt;::local_intersect (3,002 samples, 1.24%)</title><rect x="87.5651%" y="133" width="1.2383%" height="15" fill="rgb(236,23,11)"/><text x="87.8151%" y="143.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (949 samples, 0.39%)</title><rect x="88.8034%" y="133" width="0.3915%" height="15" fill="rgb(205,117,38)"/><text x="89.0534%" y="143.50"></text></g><g><title>ray-tracer`ray_tracer::world::World::color_at (219,210 samples, 90.42%)</title><rect x="2.6626%" y="181" width="90.4220%" height="15" fill="rgb(237,72,25)"/><text x="2.9126%" y="191.50">ray-tracer`ray_tracer::world::World::color_at</text></g><g><title>ray-tracer`ray_tracer::world::World::intersect_with_ray (108,733 samples, 44.85%)</title><rect x="48.2333%" y="165" width="44.8513%" height="15" fill="rgb(244,70,9)"/><text x="48.4833%" y="175.50">ray-tracer`ray_tracer::world::World::intersect_with_ray</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (96,121 samples, 39.65%)</title><rect x="53.4356%" y="149" width="39.6490%" height="15" fill="rgb(217,125,39)"/><text x="53.6856%" y="159.50">ray-tracer`ray_tracer::shape::Shape::intersect</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (9,416 samples, 3.88%)</title><rect x="89.2006%" y="133" width="3.8840%" height="15" fill="rgb(235,36,10)"/><text x="89.4506%" y="143.50">ray-..</text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (3,189 samples, 1.32%)</title><rect x="91.7692%" y="117" width="1.3154%" height="15" fill="rgb(251,123,47)"/><text x="92.0192%" y="127.50"></text></g><g><title>ray-tracer`ray_tracer::camera::Camera::render (225,231 samples, 92.91%)</title><rect x="0.1873%" y="197" width="92.9056%" height="15" fill="rgb(221,13,13)"/><text x="0.4373%" y="207.50">ray-tracer`ray_tracer::camera::Camera::render</text></g><g><title>libsystem_kernel.dylib`write (379 samples, 0.16%)</title><rect x="93.4769%" y="181" width="0.1563%" height="15" fill="rgb(238,131,9)"/><text x="93.7269%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (447 samples, 0.18%)</title><rect x="93.7772%" y="165" width="0.1844%" height="15" fill="rgb(211,50,8)"/><text x="94.0272%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (400 samples, 0.16%)</title><rect x="93.7966%" y="149" width="0.1650%" height="15" fill="rgb(245,182,24)"/><text x="94.0466%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (819 samples, 0.34%)</title><rect x="93.6332%" y="181" width="0.3378%" height="15" fill="rgb(242,14,37)"/><text x="93.8832%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (975 samples, 0.40%)</title><rect x="94.0243%" y="181" width="0.4022%" height="15" fill="rgb(246,228,12)"/><text x="94.2743%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (279 samples, 0.12%)</title><rect x="94.4306%" y="181" width="0.1151%" height="15" fill="rgb(213,55,15)"/><text x="94.6806%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (472 samples, 0.19%)</title><rect x="94.9915%" y="133" width="0.1947%" height="15" fill="rgb(209,9,3)"/><text x="95.2415%" y="143.50"></text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (774 samples, 0.32%)</title><rect x="94.8711%" y="149" width="0.3193%" height="15" fill="rgb(230,59,30)"/><text x="95.1211%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (312 samples, 0.13%)</title><rect x="96.5256%" y="101" width="0.1287%" height="15" fill="rgb(209,121,21)"/><text x="96.7756%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,626 samples, 0.67%)</title><rect x="96.9467%" y="53" width="0.6707%" height="15" fill="rgb(220,109,13)"/><text x="97.1967%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,506 samples, 0.62%)</title><rect x="96.9962%" y="37" width="0.6212%" height="15" fill="rgb(232,18,1)"/><text x="97.2462%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,851 samples, 0.76%)</title><rect x="96.8597%" y="69" width="0.7635%" height="15" fill="rgb(215,41,42)"/><text x="97.1097%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (306 samples, 0.13%)</title><rect x="97.7449%" y="37" width="0.1262%" height="15" fill="rgb(224,123,36)"/><text x="97.9949%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (441 samples, 0.18%)</title><rect x="97.6905%" y="53" width="0.1819%" height="15" fill="rgb(240,125,3)"/><text x="97.9405%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`realloc (744 samples, 0.31%)</title><rect x="97.6410%" y="69" width="0.3069%" height="15" fill="rgb(205,98,50)"/><text x="97.8910%" y="79.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,207 samples, 1.32%)</title><rect x="96.6543%" y="101" width="1.3229%" height="15" fill="rgb(205,185,37)"/><text x="96.9043%" y="111.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (2,940 samples, 1.21%)</title><rect x="96.7644%" y="85" width="1.2127%" height="15" fill="rgb(238,207,15)"/><text x="97.0144%" y="95.50"></text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3,893 samples, 1.61%)</title><rect x="96.3771%" y="117" width="1.6058%" height="15" fill="rgb(213,199,42)"/><text x="96.6271%" y="127.50"></text></g><g><title>ray-tracer`core::fmt::Formatter::write_formatted_parts (4,619 samples, 1.91%)</title><rect x="96.0933%" y="133" width="1.9053%" height="15" fill="rgb(235,201,11)"/><text x="96.3433%" y="143.50">r..</text></g><g><title>ray-tracer`core::fmt::float::float_to_decimal_common_shortest (11,312 samples, 4.67%)</title><rect x="95.2918%" y="149" width="4.6661%" height="15" fill="rgb(207,46,11)"/><text x="95.5418%" y="159.50">ray-t..</text></g><g><title>ray-tracer`core::num::flt2dec::strategy::grisu::format_shortest_opt (4,750 samples, 1.96%)</title><rect x="97.9986%" y="133" width="1.9593%" height="15" fill="rgb(241,35,35)"/><text x="98.2486%" y="143.50">r..</text></g><g><title>ray-tracer`alloc::fmt::format (13,168 samples, 5.43%)</title><rect x="94.5456%" y="181" width="5.4317%" height="15" fill="rgb(243,32,47)"/><text x="94.7956%" y="191.50">ray-tra..</text></g><g><title>ray-tracer`core::fmt::write (12,768 samples, 5.27%)</title><rect x="94.7106%" y="165" width="5.2667%" height="15" fill="rgb(247,202,23)"/><text x="94.9606%" y="175.50">ray-tr..</text></g><g><title>ray-tracer`ray_tracer::canvas::Canvas::save_file (16,707 samples, 6.89%)</title><rect x="93.0929%" y="197" width="6.8915%" height="15" fill="rgb(219,102,11)"/><text x="93.3429%" y="207.50">ray-trace..</text></g><g><title>all (242,430 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(243,110,44)"/><text x="0.2500%" y="335.50"></text></g><g><title>0x1 (242,430 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,74,54)"/><text x="0.2500%" y="319.50">0x1</text></g><g><title>libdyld.dylib`start (242,430 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(216,99,12)"/><text x="0.2500%" y="303.50">libdyld.dylib`start</text></g><g><title>ray-tracer`main (242,430 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(226,22,26)"/><text x="0.2500%" y="287.50">ray-tracer`main</text></g><g><title>ray-tracer`std::rt::lang_start_internal (242,430 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(217,163,10)"/><text x="0.2500%" y="271.50">ray-tracer`std::rt::lang_start_internal</text></g><g><title>ray-tracer`std::rt::lang_start::_{{closure}} (242,430 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,25,53)"/><text x="0.2500%" y="255.50">ray-tracer`std::rt::lang_start::_{{closure}}</text></g><g><title>ray-tracer`std::sys_common::backtrace::__rust_begin_short_backtrace (242,430 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(252,105,26)"/><text x="0.2500%" y="239.50">ray-tracer`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ray-tracer`ray_tracer::demo::demo (242,430 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(220,39,43)"/><text x="0.2500%" y="223.50">ray-tracer`ray_tracer::demo::demo</text></g></svg></svg>