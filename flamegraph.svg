<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="389.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="389.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_m.dylib`round (1,260 samples, 1.63%)</title><rect x="0.0013%" y="229" width="1.6263%" height="15" fill="rgb(227,0,7)"/><text x="0.2513%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (90 samples, 0.12%)</title><rect x="1.6276%" y="229" width="0.1162%" height="15" fill="rgb(217,0,24)"/><text x="1.8776%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (79 samples, 0.10%)</title><rect x="1.9309%" y="229" width="0.1020%" height="15" fill="rgb(221,193,54)"/><text x="2.1809%" y="239.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (845 samples, 1.09%)</title><rect x="4.7988%" y="213" width="1.0906%" height="15" fill="rgb(248,212,6)"/><text x="5.0488%" y="223.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (176 samples, 0.23%)</title><rect x="6.1154%" y="213" width="0.2272%" height="15" fill="rgb(208,68,35)"/><text x="6.3654%" y="223.50"></text></g><g><title>ray-tracer`alloc::slice::_&lt;impl [T]&gt;::repeat (654 samples, 0.84%)</title><rect x="6.4342%" y="213" width="0.8441%" height="15" fill="rgb(232,128,0)"/><text x="6.6842%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (654 samples, 0.84%)</title><rect x="6.4342%" y="197" width="0.8441%" height="15" fill="rgb(207,160,47)"/><text x="6.6842%" y="207.50"></text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (1,948 samples, 2.51%)</title><rect x="7.2886%" y="213" width="2.5143%" height="15" fill="rgb(228,23,34)"/><text x="7.5386%" y="223.50">ra..</text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (549 samples, 0.71%)</title><rect x="9.0943%" y="197" width="0.7086%" height="15" fill="rgb(218,30,26)"/><text x="9.3443%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50c290 (205 samples, 0.26%)</title><rect x="10.1914%" y="197" width="0.2646%" height="15" fill="rgb(220,122,19)"/><text x="10.4414%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (356 samples, 0.46%)</title><rect x="10.4560%" y="197" width="0.4595%" height="15" fill="rgb(250,228,42)"/><text x="10.7060%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (319 samples, 0.41%)</title><rect x="11.3247%" y="181" width="0.4117%" height="15" fill="rgb(240,193,28)"/><text x="11.5747%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (283 samples, 0.37%)</title><rect x="11.3711%" y="165" width="0.3653%" height="15" fill="rgb(216,20,37)"/><text x="11.6211%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free (585 samples, 0.76%)</title><rect x="11.0020%" y="197" width="0.7551%" height="15" fill="rgb(206,188,39)"/><text x="11.2520%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (378 samples, 0.49%)</title><rect x="13.3059%" y="165" width="0.4879%" height="15" fill="rgb(217,207,13)"/><text x="13.5559%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,793 samples, 2.31%)</title><rect x="11.7570%" y="197" width="2.3142%" height="15" fill="rgb(231,73,38)"/><text x="12.0070%" y="207.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,173 samples, 1.51%)</title><rect x="12.5573%" y="181" width="1.5140%" height="15" fill="rgb(225,20,46)"/><text x="12.8073%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (215 samples, 0.28%)</title><rect x="13.7938%" y="165" width="0.2775%" height="15" fill="rgb(210,31,41)"/><text x="14.0438%" y="175.50"></text></g><g><title>libsystem_m.dylib`floor (116 samples, 0.15%)</title><rect x="16.8940%" y="181" width="0.1497%" height="15" fill="rgb(221,200,47)"/><text x="17.1440%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (91 samples, 0.12%)</title><rect x="17.1109%" y="181" width="0.1175%" height="15" fill="rgb(226,26,5)"/><text x="17.3609%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (262 samples, 0.34%)</title><rect x="17.8130%" y="165" width="0.3382%" height="15" fill="rgb(249,33,26)"/><text x="18.0630%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (185 samples, 0.24%)</title><rect x="17.9124%" y="149" width="0.2388%" height="15" fill="rgb(235,183,28)"/><text x="18.1624%" y="159.50"></text></g><g><title>ray-tracer`ray_tracer::intersection::Intersection::hit (460 samples, 0.59%)</title><rect x="17.5678%" y="181" width="0.5937%" height="15" fill="rgb(221,5,38)"/><text x="17.8178%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (630 samples, 0.81%)</title><rect x="18.5113%" y="165" width="0.8131%" height="15" fill="rgb(247,18,42)"/><text x="18.7613%" y="175.50"></text></g><g><title>libsystem_m.dylib`fmod (163 samples, 0.21%)</title><rect x="19.3244%" y="165" width="0.2104%" height="15" fill="rgb(241,131,45)"/><text x="19.5744%" y="175.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (122 samples, 0.16%)</title><rect x="19.5348%" y="165" width="0.1575%" height="15" fill="rgb(249,31,29)"/><text x="19.7848%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::pattern::Pattern::pattern_at_object (2,503 samples, 3.23%)</title><rect x="18.1977%" y="181" width="3.2306%" height="15" fill="rgb(225,111,53)"/><text x="18.4477%" y="191.50">ray..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (1,345 samples, 1.74%)</title><rect x="19.6923%" y="165" width="1.7360%" height="15" fill="rgb(238,160,17)"/><text x="19.9423%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (375 samples, 0.48%)</title><rect x="20.9443%" y="149" width="0.4840%" height="15" fill="rgb(214,148,48)"/><text x="21.1943%" y="159.50"></text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (231 samples, 0.30%)</title><rect x="21.4283%" y="181" width="0.2982%" height="15" fill="rgb(232,36,49)"/><text x="21.6783%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (429 samples, 0.55%)</title><rect x="23.0533%" y="149" width="0.5537%" height="15" fill="rgb(209,103,24)"/><text x="23.3033%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (389 samples, 0.50%)</title><rect x="23.1049%" y="133" width="0.5021%" height="15" fill="rgb(229,88,8)"/><text x="23.3549%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free (704 samples, 0.91%)</title><rect x="22.7190%" y="165" width="0.9087%" height="15" fill="rgb(213,181,19)"/><text x="22.9690%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (290 samples, 0.37%)</title><rect x="25.1287%" y="133" width="0.3743%" height="15" fill="rgb(254,191,54)"/><text x="25.3787%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,490 samples, 1.92%)</title><rect x="23.6277%" y="165" width="1.9232%" height="15" fill="rgb(241,83,37)"/><text x="23.8777%" y="175.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (702 samples, 0.91%)</title><rect x="24.6447%" y="149" width="0.9061%" height="15" fill="rgb(233,36,39)"/><text x="24.8947%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (259 samples, 0.33%)</title><rect x="25.8309%" y="133" width="0.3343%" height="15" fill="rgb(226,3,54)"/><text x="26.0809%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (240 samples, 0.31%)</title><rect x="25.8554%" y="117" width="0.3098%" height="15" fill="rgb(245,192,40)"/><text x="26.1054%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (227 samples, 0.29%)</title><rect x="25.8722%" y="101" width="0.2930%" height="15" fill="rgb(238,167,29)"/><text x="26.1222%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (88 samples, 0.11%)</title><rect x="26.0516%" y="85" width="0.1136%" height="15" fill="rgb(232,182,51)"/><text x="26.3016%" y="95.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (316 samples, 0.41%)</title><rect x="25.7599%" y="165" width="0.4079%" height="15" fill="rgb(231,60,39)"/><text x="26.0099%" y="175.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (271 samples, 0.35%)</title><rect x="25.8180%" y="149" width="0.3498%" height="15" fill="rgb(208,69,12)"/><text x="26.0680%" y="159.50"></text></g><g><title>ray-tracer`alloc::slice::merge_sort (148 samples, 0.19%)</title><rect x="26.1703%" y="165" width="0.1910%" height="15" fill="rgb(235,93,37)"/><text x="26.4203%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (103 samples, 0.13%)</title><rect x="26.3614%" y="165" width="0.1329%" height="15" fill="rgb(213,116,39)"/><text x="26.6114%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (2,711 samples, 3.50%)</title><rect x="27.1474%" y="149" width="3.4991%" height="15" fill="rgb(222,207,29)"/><text x="27.3974%" y="159.50">lib..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,116 samples, 1.44%)</title><rect x="30.8698%" y="133" width="1.4404%" height="15" fill="rgb(206,96,30)"/><text x="31.1198%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,033 samples, 1.33%)</title><rect x="30.9769%" y="117" width="1.3333%" height="15" fill="rgb(218,138,4)"/><text x="31.2269%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (155 samples, 0.20%)</title><rect x="32.1102%" y="101" width="0.2001%" height="15" fill="rgb(250,191,14)"/><text x="32.3602%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,301 samples, 1.68%)</title><rect x="30.6465%" y="149" width="1.6792%" height="15" fill="rgb(239,60,40)"/><text x="30.8965%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (265 samples, 0.34%)</title><rect x="34.2360%" y="133" width="0.3420%" height="15" fill="rgb(206,27,48)"/><text x="34.4860%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (650 samples, 0.84%)</title><rect x="34.6748%" y="117" width="0.8390%" height="15" fill="rgb(225,35,8)"/><text x="34.9248%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (617 samples, 0.80%)</title><rect x="34.7174%" y="101" width="0.7964%" height="15" fill="rgb(250,213,24)"/><text x="34.9674%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (208 samples, 0.27%)</title><rect x="35.2453%" y="85" width="0.2685%" height="15" fill="rgb(247,123,22)"/><text x="35.4953%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (729 samples, 0.94%)</title><rect x="34.5780%" y="133" width="0.9409%" height="15" fill="rgb(231,138,38)"/><text x="34.8280%" y="143.50"></text></g><g><title>ray-tracer`&lt;ray_tracer::sphere::Sphere as ray_tracer::shape::Shape&gt;::local_intersect (2,395 samples, 3.09%)</title><rect x="32.4535%" y="149" width="3.0912%" height="15" fill="rgb(231,145,46)"/><text x="32.7035%" y="159.50">ray..</text></g><g><title>ray-tracer`DYLD-STUB$$fma (567 samples, 0.73%)</title><rect x="35.5447%" y="149" width="0.7318%" height="15" fill="rgb(251,118,11)"/><text x="35.7947%" y="159.50"></text></g><g><title>ray-tracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (22,491 samples, 29.03%)</title><rect x="14.1861%" y="197" width="29.0293%" height="15" fill="rgb(217,147,25)"/><text x="14.4361%" y="207.50">ray-tracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt;..</text></g><g><title>ray-tracer`ray_tracer::world::World::intersect_with_ray (16,649 samples, 21.49%)</title><rect x="21.7264%" y="181" width="21.4890%" height="15" fill="rgb(247,81,37)"/><text x="21.9764%" y="191.50">ray-tracer`ray_tracer::world::Worl..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (12,955 samples, 16.72%)</title><rect x="26.4943%" y="165" width="16.7211%" height="15" fill="rgb(209,12,38)"/><text x="26.7443%" y="175.50">ray-tracer`ray_tracer::sha..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (5,355 samples, 6.91%)</title><rect x="36.3037%" y="149" width="6.9117%" height="15" fill="rgb(227,1,9)"/><text x="36.5537%" y="159.50">ray-trace..</text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (1,476 samples, 1.91%)</title><rect x="41.3103%" y="133" width="1.9051%" height="15" fill="rgb(248,47,43)"/><text x="41.5603%" y="143.50">l..</text></g><g><title>ray-tracer`alloc::slice::merge_sort (83 samples, 0.11%)</title><rect x="43.6026%" y="197" width="0.1071%" height="15" fill="rgb(221,10,30)"/><text x="43.8526%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (582 samples, 0.75%)</title><rect x="45.0637%" y="165" width="0.7512%" height="15" fill="rgb(210,229,1)"/><text x="45.3137%" y="175.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (131 samples, 0.17%)</title><rect x="45.8149%" y="165" width="0.1691%" height="15" fill="rgb(222,148,37)"/><text x="46.0649%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::intersection::Intersection::prepare_computations (3,206 samples, 4.14%)</title><rect x="43.7278%" y="197" width="4.1380%" height="15" fill="rgb(234,67,33)"/><text x="43.9778%" y="207.50">ray-t..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::normal_at (2,709 samples, 3.50%)</title><rect x="44.3693%" y="181" width="3.4965%" height="15" fill="rgb(247,98,35)"/><text x="44.6193%" y="191.50">ray..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (1,458 samples, 1.88%)</title><rect x="45.9840%" y="165" width="1.8818%" height="15" fill="rgb(247,138,52)"/><text x="46.2340%" y="175.50">r..</text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (392 samples, 0.51%)</title><rect x="47.3599%" y="149" width="0.5060%" height="15" fill="rgb(213,79,30)"/><text x="47.6099%" y="159.50"></text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (239 samples, 0.31%)</title><rect x="47.8787%" y="197" width="0.3085%" height="15" fill="rgb(246,177,23)"/><text x="48.1287%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (523 samples, 0.68%)</title><rect x="50.3814%" y="165" width="0.6750%" height="15" fill="rgb(230,62,27)"/><text x="50.6314%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (467 samples, 0.60%)</title><rect x="50.4537%" y="149" width="0.6028%" height="15" fill="rgb(216,154,8)"/><text x="50.7037%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (911 samples, 1.18%)</title><rect x="49.9129%" y="181" width="1.1758%" height="15" fill="rgb(244,35,45)"/><text x="50.1629%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (156 samples, 0.20%)</title><rect x="52.6543%" y="149" width="0.2014%" height="15" fill="rgb(251,115,12)"/><text x="52.9043%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (1,385 samples, 1.79%)</title><rect x="51.0887%" y="181" width="1.7876%" height="15" fill="rgb(240,54,50)"/><text x="51.3387%" y="191.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (393 samples, 0.51%)</title><rect x="52.3691%" y="165" width="0.5072%" height="15" fill="rgb(233,84,52)"/><text x="52.6191%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,060 samples, 1.37%)</title><rect x="53.9050%" y="133" width="1.3681%" height="15" fill="rgb(207,117,47)"/><text x="54.1550%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (964 samples, 1.24%)</title><rect x="54.0289%" y="117" width="1.2442%" height="15" fill="rgb(249,43,39)"/><text x="54.2789%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,217 samples, 1.57%)</title><rect x="53.7114%" y="149" width="1.5708%" height="15" fill="rgb(209,38,44)"/><text x="53.9614%" y="159.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,643 samples, 2.12%)</title><rect x="53.2093%" y="181" width="2.1206%" height="15" fill="rgb(236,212,23)"/><text x="53.4593%" y="191.50">r..</text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (1,358 samples, 1.75%)</title><rect x="53.5772%" y="165" width="1.7528%" height="15" fill="rgb(242,79,21)"/><text x="53.8272%" y="175.50"></text></g><g><title>ray-tracer`alloc::slice::merge_sort (318 samples, 0.41%)</title><rect x="55.3622%" y="181" width="0.4104%" height="15" fill="rgb(211,96,35)"/><text x="55.6122%" y="191.50"></text></g><g><title>ray-tracer`alloc::slice::insert_head (117 samples, 0.15%)</title><rect x="55.6217%" y="165" width="0.1510%" height="15" fill="rgb(253,215,40)"/><text x="55.8717%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (142 samples, 0.18%)</title><rect x="55.7727%" y="181" width="0.1833%" height="15" fill="rgb(211,81,21)"/><text x="56.0227%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (3,921 samples, 5.06%)</title><rect x="56.9434%" y="165" width="5.0609%" height="15" fill="rgb(208,190,38)"/><text x="57.1934%" y="175.50">libsys..</text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (2,121 samples, 2.74%)</title><rect x="62.2662%" y="149" width="2.7376%" height="15" fill="rgb(235,213,38)"/><text x="62.5162%" y="159.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,972 samples, 2.55%)</title><rect x="62.4585%" y="133" width="2.5453%" height="15" fill="rgb(237,122,38)"/><text x="62.7085%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (739 samples, 0.95%)</title><rect x="64.0500%" y="117" width="0.9538%" height="15" fill="rgb(244,218,35)"/><text x="64.3000%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (182 samples, 0.23%)</title><rect x="64.7689%" y="101" width="0.2349%" height="15" fill="rgb(240,68,47)"/><text x="65.0189%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (2,336 samples, 3.02%)</title><rect x="62.0042%" y="165" width="3.0151%" height="15" fill="rgb(210,16,53)"/><text x="62.2542%" y="175.50">lib..</text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (421 samples, 0.54%)</title><rect x="67.4729%" y="149" width="0.5434%" height="15" fill="rgb(235,124,12)"/><text x="67.7229%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (585 samples, 0.76%)</title><rect x="68.0950%" y="133" width="0.7551%" height="15" fill="rgb(224,169,11)"/><text x="68.3450%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (548 samples, 0.71%)</title><rect x="68.1428%" y="117" width="0.7073%" height="15" fill="rgb(250,166,2)"/><text x="68.3928%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (210 samples, 0.27%)</title><rect x="68.5791%" y="101" width="0.2710%" height="15" fill="rgb(242,216,29)"/><text x="68.8291%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (651 samples, 0.84%)</title><rect x="68.0163%" y="149" width="0.8402%" height="15" fill="rgb(230,116,27)"/><text x="68.2663%" y="159.50"></text></g><g><title>ray-tracer`&lt;ray_tracer::sphere::Sphere as ray_tracer::shape::Shape&gt;::local_intersect (2,889 samples, 3.73%)</title><rect x="65.1497%" y="165" width="3.7288%" height="15" fill="rgb(228,99,48)"/><text x="65.3997%" y="175.50">ray-..</text></g><g><title>ray-tracer`DYLD-STUB$$fma (819 samples, 1.06%)</title><rect x="68.8785%" y="165" width="1.0571%" height="15" fill="rgb(253,11,6)"/><text x="69.1285%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::world::World::color_at (54,552 samples, 70.41%)</title><rect x="9.8029%" y="213" width="70.4106%" height="15" fill="rgb(247,143,39)"/><text x="10.0529%" y="223.50">ray-tracer`ray_tracer::world::World::color_at</text></g><g><title>ray-tracer`ray_tracer::world::World::intersect_with_ray (24,775 samples, 31.98%)</title><rect x="48.2363%" y="197" width="31.9772%" height="15" fill="rgb(236,97,10)"/><text x="48.4863%" y="207.50">ray-tracer`ray_tracer::world::World::intersect_with_..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (18,794 samples, 24.26%)</title><rect x="55.9560%" y="181" width="24.2575%" height="15" fill="rgb(233,208,19)"/><text x="56.2060%" y="191.50">ray-tracer`ray_tracer::shape::Shape::in..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (7,943 samples, 10.25%)</title><rect x="69.9614%" y="165" width="10.2521%" height="15" fill="rgb(216,164,2)"/><text x="70.2114%" y="175.50">ray-tracer`ray_..</text></g><g><title>libsystem_m.dylib`0x00007fff2a50d2f7 (2,134 samples, 2.75%)</title><rect x="77.4591%" y="149" width="2.7544%" height="15" fill="rgb(220,129,5)"/><text x="77.7091%" y="159.50">li..</text></g><g><title>ray-tracer`ray_tracer::camera::Camera::render (60,456 samples, 78.03%)</title><rect x="2.2058%" y="229" width="78.0309%" height="15" fill="rgb(242,17,10)"/><text x="2.4558%" y="239.50">ray-tracer`ray_tracer::camera::Camera::render</text></g><g><title>libsystem_kernel.dylib`write (171 samples, 0.22%)</title><rect x="83.2028%" y="213" width="0.2207%" height="15" fill="rgb(242,107,0)"/><text x="83.4528%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (398 samples, 0.51%)</title><rect x="83.8313%" y="197" width="0.5137%" height="15" fill="rgb(251,28,31)"/><text x="84.0813%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (356 samples, 0.46%)</title><rect x="83.8855%" y="181" width="0.4595%" height="15" fill="rgb(233,223,10)"/><text x="84.1355%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free (729 samples, 0.94%)</title><rect x="83.4325%" y="213" width="0.9409%" height="15" fill="rgb(215,21,27)"/><text x="83.6825%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`free_large (138 samples, 0.18%)</title><rect x="84.3734%" y="213" width="0.1781%" height="15" fill="rgb(232,23,21)"/><text x="84.6234%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`mvm_deallocate_pages (138 samples, 0.18%)</title><rect x="84.3734%" y="197" width="0.1781%" height="15" fill="rgb(244,5,23)"/><text x="84.6234%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (138 samples, 0.18%)</title><rect x="84.3734%" y="181" width="0.1781%" height="15" fill="rgb(226,81,46)"/><text x="84.6234%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (817 samples, 1.05%)</title><rect x="84.5515%" y="213" width="1.0545%" height="15" fill="rgb(247,70,30)"/><text x="84.8015%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (315 samples, 0.41%)</title><rect x="85.6499%" y="213" width="0.4066%" height="15" fill="rgb(212,68,19)"/><text x="85.8999%" y="223.50"></text></g><g><title>ray-tracer`core::fmt::float::_&lt;impl core::fmt::Display for f64&gt;::fmt (108 samples, 0.14%)</title><rect x="86.7083%" y="197" width="0.1394%" height="15" fill="rgb(240,187,13)"/><text x="86.9583%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (164 samples, 0.21%)</title><rect x="87.6389%" y="181" width="0.2117%" height="15" fill="rgb(223,113,26)"/><text x="87.8889%" y="191.50"></text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (726 samples, 0.94%)</title><rect x="87.8506%" y="181" width="0.9371%" height="15" fill="rgb(206,192,2)"/><text x="88.1006%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (411 samples, 0.53%)</title><rect x="88.2572%" y="165" width="0.5305%" height="15" fill="rgb(241,108,4)"/><text x="88.5072%" y="175.50"></text></g><g><title>ray-tracer`core::fmt::Formatter::pad_formatted_parts (122 samples, 0.16%)</title><rect x="88.8031%" y="181" width="0.1575%" height="15" fill="rgb(247,173,49)"/><text x="89.0531%" y="191.50"></text></g><g><title>ray-tracer`core::fmt::float::_&lt;impl core::fmt::Display for f64&gt;::fmt (147 samples, 0.19%)</title><rect x="88.9993%" y="181" width="0.1897%" height="15" fill="rgb(224,114,35)"/><text x="89.2493%" y="191.50"></text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (94 samples, 0.12%)</title><rect x="90.8915%" y="165" width="0.1213%" height="15" fill="rgb(245,159,27)"/><text x="91.1415%" y="175.50"></text></g><g><title>ray-tracer`core::fmt::Formatter::pad_formatted_parts (270 samples, 0.35%)</title><rect x="91.0128%" y="165" width="0.3485%" height="15" fill="rgb(245,172,44)"/><text x="91.2628%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (188 samples, 0.24%)</title><rect x="92.2661%" y="149" width="0.2427%" height="15" fill="rgb(236,23,11)"/><text x="92.5161%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (248 samples, 0.32%)</title><rect x="93.1038%" y="133" width="0.3201%" height="15" fill="rgb(205,117,38)"/><text x="93.3538%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,371 samples, 1.77%)</title><rect x="94.4900%" y="85" width="1.7696%" height="15" fill="rgb(237,72,25)"/><text x="94.7400%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,227 samples, 1.58%)</title><rect x="94.6758%" y="69" width="1.5837%" height="15" fill="rgb(244,70,9)"/><text x="94.9258%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,608 samples, 2.08%)</title><rect x="94.2047%" y="101" width="2.0755%" height="15" fill="rgb(217,125,39)"/><text x="94.4547%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`szone_size (86 samples, 0.11%)</title><rect x="96.4906%" y="53" width="0.1110%" height="15" fill="rgb(235,36,10)"/><text x="96.7406%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (79 samples, 0.10%)</title><rect x="96.4996%" y="37" width="0.1020%" height="15" fill="rgb(251,123,47)"/><text x="96.7496%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (107 samples, 0.14%)</title><rect x="96.4648%" y="69" width="0.1381%" height="15" fill="rgb(221,13,13)"/><text x="96.7148%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (161 samples, 0.21%)</title><rect x="96.3989%" y="85" width="0.2078%" height="15" fill="rgb(238,131,9)"/><text x="96.6489%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`realloc (288 samples, 0.37%)</title><rect x="96.3241%" y="101" width="0.3717%" height="15" fill="rgb(211,50,8)"/><text x="96.5741%" y="111.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,576 samples, 3.32%)</title><rect x="93.4239%" y="133" width="3.3249%" height="15" fill="rgb(245,182,24)"/><text x="93.6739%" y="143.50">ray..</text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (2,164 samples, 2.79%)</title><rect x="93.9556%" y="117" width="2.7931%" height="15" fill="rgb(242,14,37)"/><text x="94.2056%" y="127.50">ra..</text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3,312 samples, 4.27%)</title><rect x="92.5087%" y="149" width="4.2748%" height="15" fill="rgb(246,228,12)"/><text x="92.7587%" y="159.50">ray-t..</text></g><g><title>ray-tracer`core::fmt::Formatter::write_formatted_parts (4,279 samples, 5.52%)</title><rect x="91.3613%" y="165" width="5.5229%" height="15" fill="rgb(213,55,15)"/><text x="91.6113%" y="175.50">ray-tra..</text></g><g><title>ray-tracer`core::fmt::float::float_to_decimal_common_shortest (8,270 samples, 10.67%)</title><rect x="89.1890%" y="181" width="10.6741%" height="15" fill="rgb(209,9,3)"/><text x="89.4390%" y="191.50">ray-tracer`core:..</text></g><g><title>ray-tracer`core::num::flt2dec::strategy::grisu::format_shortest_opt (2,308 samples, 2.98%)</title><rect x="96.8842%" y="165" width="2.9789%" height="15" fill="rgb(230,59,30)"/><text x="97.1342%" y="175.50">ray..</text></g><g><title>ray-tracer`alloc::fmt::format (10,714 samples, 13.83%)</title><rect x="86.0565%" y="213" width="13.8286%" height="15" fill="rgb(209,121,21)"/><text x="86.3065%" y="223.50">ray-tracer`alloc::fmt..</text></g><g><title>ray-tracer`core::fmt::write (10,050 samples, 12.97%)</title><rect x="86.9135%" y="197" width="12.9716%" height="15" fill="rgb(220,109,13)"/><text x="87.1635%" y="207.50">ray-tracer`core::fm..</text></g><g><title>ray-tracer`ray_tracer::canvas::Canvas::save_file (15,257 samples, 19.69%)</title><rect x="80.2367%" y="229" width="19.6923%" height="15" fill="rgb(232,18,1)"/><text x="80.4867%" y="239.50">ray-tracer`ray_tracer::canvas::..</text></g><g><title>0x1 (77,476 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9987%" height="15" fill="rgb(215,41,42)"/><text x="0.2500%" y="351.50">0x1</text></g><g><title>libdyld.dylib`start (77,476 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9987%" height="15" fill="rgb(224,123,36)"/><text x="0.2500%" y="335.50">libdyld.dylib`start</text></g><g><title>ray-tracer`main (77,476 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9987%" height="15" fill="rgb(240,125,3)"/><text x="0.2500%" y="319.50">ray-tracer`main</text></g><g><title>ray-tracer`std::rt::lang_start_internal (77,476 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9987%" height="15" fill="rgb(205,98,50)"/><text x="0.2500%" y="303.50">ray-tracer`std::rt::lang_start_internal</text></g><g><title>ray-tracer`std::rt::lang_start::_{{closure}} (77,476 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9987%" height="15" fill="rgb(205,185,37)"/><text x="0.2500%" y="287.50">ray-tracer`std::rt::lang_start::_{{closure}}</text></g><g><title>ray-tracer`std::sys_common::backtrace::__rust_begin_short_backtrace (77,476 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9987%" height="15" fill="rgb(238,207,15)"/><text x="0.2500%" y="271.50">ray-tracer`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ray-tracer`ray_tracer::demo::demo (77,476 samples, 100.00%)</title><rect x="0.0000%" y="245" width="99.9987%" height="15" fill="rgb(213,199,42)"/><text x="0.2500%" y="255.50">ray-tracer`ray_tracer::demo::demo</text></g><g><title>all (77,477 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(235,201,11)"/><text x="0.2500%" y="367.50"></text></g></svg></svg>