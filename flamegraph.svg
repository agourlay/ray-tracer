<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:"Verdana"; font-size:12px; fill:rgb(0,0,0); }
#title { text-anchor:middle; font-size:17px; }
#search { opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[var nametype = 'Function:';
var fontsize = 12;
var fontwidth = 0.59;
var xpad = 10;
var inverted = false;
var searchcolor = 'rgb(230,0,230)';
var fluiddrawing = true;
var truncate_text_right = false;]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
          svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            var el = frames.children;
            for(var i = 0; i < el.length; i++) {
                update_text(el[i]);
            }

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad - 100;
            matchedtxt.attributes.x.value = svgWidth - xpad - 100;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes._orig_x) {
            var params = get_params()
            params.x = el.attributes._orig_x.value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["_orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("_orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["_orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["_orig_" + attr].value;
    e.removeAttribute("_orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));
    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (/^ *\$/.test(txt) || t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.attributes != undefined) {
        orig_load(e, "x");
        orig_load(e, "width");
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, ratio) {
    if (e.attributes != undefined) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = format_percent((parseFloat(e.attributes.x.value) - x) * ratio);
            if (e.tagName == "text") {
                e.attributes.x.value = format_percent(parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value) + (100 * 3 / frames.attributes.width.value));
            }
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = format_percent(parseFloat(e.attributes.width.value) * ratio);
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, ratio);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            orig_save(e, "x");
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            orig_save(e, "width");
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseFloat(attr.width.value);
    var xmin = parseFloat(attr.x.value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    var ratio = 100 / width;
    // XXX: Workaround for JavaScript float issues (fix me)
    var fudge = 0.001;
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseFloat(a.x.value);
        var ew = parseFloat(a.width.value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew+fudge) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                update_text(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex + fudge >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, ratio);
                update_text(e);
            }
        }
    }
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
        update_text(el[i]);
    }
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseFloat(rect.attributes.width.value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseFloat(rect.attributes.x.value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    var fudge = 0.0001;    // JavaScript floating point
    for (var k in keys) {
        var x = parseFloat(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw - fudge) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" x="50.0000%" y="24.00">Flame Graph</text><text id="details" x="10" y="357.00"> </text><text id="unzoom" class="hide" x="10" y="24.00">Reset Zoom</text><text id="search" x="1090" y="24.00">Search</text><text id="matched" x="1090" y="357.00"> </text><svg id="frames" x="10" width="1180"><g><title>libsystem_m.dylib`round (2,625 samples, 1.07%)</title><rect x="0.0004%" y="197" width="1.0734%" height="15" fill="rgb(227,0,7)"/><text x="0.2504%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (676 samples, 0.28%)</title><rect x="2.1091%" y="181" width="0.2764%" height="15" fill="rgb(217,0,24)"/><text x="2.3591%" y="191.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (252 samples, 0.10%)</title><rect x="2.4264%" y="181" width="0.1030%" height="15" fill="rgb(221,193,54)"/><text x="2.6764%" y="191.50"></text></g><g><title>ray-tracer`alloc::slice::_&lt;impl [T]&gt;::repeat (634 samples, 0.26%)</title><rect x="2.5491%" y="181" width="0.2592%" height="15" fill="rgb(248,212,6)"/><text x="2.7991%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (634 samples, 0.26%)</title><rect x="2.5491%" y="165" width="0.2592%" height="15" fill="rgb(208,68,35)"/><text x="2.7991%" y="175.50"></text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (2,083 samples, 0.85%)</title><rect x="2.8129%" y="181" width="0.8517%" height="15" fill="rgb(232,128,0)"/><text x="3.0629%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (709 samples, 0.29%)</title><rect x="3.3747%" y="165" width="0.2899%" height="15" fill="rgb(207,160,47)"/><text x="3.6247%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75d290 (252 samples, 0.10%)</title><rect x="3.7889%" y="165" width="0.1030%" height="15" fill="rgb(228,23,34)"/><text x="4.0389%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (255 samples, 0.10%)</title><rect x="4.0097%" y="149" width="0.1043%" height="15" fill="rgb(218,30,26)"/><text x="4.2597%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (451 samples, 0.18%)</title><rect x="3.9386%" y="165" width="0.1844%" height="15" fill="rgb(220,122,19)"/><text x="4.1886%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (377 samples, 0.15%)</title><rect x="4.6889%" y="133" width="0.1542%" height="15" fill="rgb(250,228,42)"/><text x="4.9389%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (2,314 samples, 0.95%)</title><rect x="4.1230%" y="165" width="0.9462%" height="15" fill="rgb(240,193,28)"/><text x="4.3730%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (1,657 samples, 0.68%)</title><rect x="4.3916%" y="149" width="0.6776%" height="15" fill="rgb(216,20,37)"/><text x="4.6416%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (553 samples, 0.23%)</title><rect x="4.8431%" y="133" width="0.2261%" height="15" fill="rgb(206,188,39)"/><text x="5.0931%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (424 samples, 0.17%)</title><rect x="6.2010%" y="133" width="0.1734%" height="15" fill="rgb(217,207,13)"/><text x="6.4510%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (261 samples, 0.11%)</title><rect x="6.2677%" y="117" width="0.1067%" height="15" fill="rgb(231,73,38)"/><text x="6.5177%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (317 samples, 0.13%)</title><rect x="6.5498%" y="37" width="0.1296%" height="15" fill="rgb(225,20,46)"/><text x="6.7998%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (250 samples, 0.10%)</title><rect x="6.6795%" y="37" width="0.1022%" height="15" fill="rgb(210,31,41)"/><text x="6.9295%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (737 samples, 0.30%)</title><rect x="6.5367%" y="53" width="0.3014%" height="15" fill="rgb(221,200,47)"/><text x="6.7867%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (808 samples, 0.33%)</title><rect x="6.5093%" y="69" width="0.3304%" height="15" fill="rgb(226,26,5)"/><text x="6.7593%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`realloc (873 samples, 0.36%)</title><rect x="6.4991%" y="85" width="0.3570%" height="15" fill="rgb(249,33,26)"/><text x="6.7491%" y="95.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (924 samples, 0.38%)</title><rect x="6.4815%" y="117" width="0.3778%" height="15" fill="rgb(235,183,28)"/><text x="6.7315%" y="127.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (898 samples, 0.37%)</title><rect x="6.4922%" y="101" width="0.3672%" height="15" fill="rgb(221,5,38)"/><text x="6.7422%" y="111.50"></text></g><g><title>ray-tracer`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,184 samples, 0.48%)</title><rect x="6.3756%" y="133" width="0.4841%" height="15" fill="rgb(247,18,42)"/><text x="6.6256%" y="143.50"></text></g><g><title>ray-tracer`ray_tracer::intersection::Intersection::hit (1,838 samples, 0.75%)</title><rect x="6.1238%" y="149" width="0.7516%" height="15" fill="rgb(241,131,45)"/><text x="6.3738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (394 samples, 0.16%)</title><rect x="7.1836%" y="133" width="0.1611%" height="15" fill="rgb(249,31,29)"/><text x="7.4336%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (367 samples, 0.15%)</title><rect x="7.5214%" y="117" width="0.1501%" height="15" fill="rgb(225,111,53)"/><text x="7.7714%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (322 samples, 0.13%)</title><rect x="7.5398%" y="101" width="0.1317%" height="15" fill="rgb(238,160,17)"/><text x="7.7898%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (827 samples, 0.34%)</title><rect x="7.3447%" y="133" width="0.3382%" height="15" fill="rgb(214,148,48)"/><text x="7.5947%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (537 samples, 0.22%)</title><rect x="8.5391%" y="101" width="0.2196%" height="15" fill="rgb(232,36,49)"/><text x="8.7891%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (3,283 samples, 1.34%)</title><rect x="7.6829%" y="133" width="1.3424%" height="15" fill="rgb(209,103,24)"/><text x="7.9329%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,226 samples, 0.91%)</title><rect x="8.1151%" y="117" width="0.9102%" height="15" fill="rgb(229,88,8)"/><text x="8.3651%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (652 samples, 0.27%)</title><rect x="8.7587%" y="101" width="0.2666%" height="15" fill="rgb(213,181,19)"/><text x="9.0087%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (569 samples, 0.23%)</title><rect x="9.1014%" y="133" width="0.2327%" height="15" fill="rgb(254,191,54)"/><text x="9.3514%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (350 samples, 0.14%)</title><rect x="9.3492%" y="133" width="0.1431%" height="15" fill="rgb(241,83,37)"/><text x="9.5992%" y="143.50"></text></g><g><title>ray-tracer`__rdl_alloc (263 samples, 0.11%)</title><rect x="9.5553%" y="133" width="0.1075%" height="15" fill="rgb(233,36,39)"/><text x="9.8053%" y="143.50"></text></g><g><title>ray-tracer`__rdl_dealloc (308 samples, 0.13%)</title><rect x="9.6628%" y="133" width="0.1259%" height="15" fill="rgb(226,3,54)"/><text x="9.9128%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (266 samples, 0.11%)</title><rect x="9.8599%" y="85" width="0.1088%" height="15" fill="rgb(245,192,40)"/><text x="10.1099%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (259 samples, 0.11%)</title><rect x="9.8628%" y="69" width="0.1059%" height="15" fill="rgb(238,167,29)"/><text x="10.1128%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (291 samples, 0.12%)</title><rect x="9.8505%" y="101" width="0.1190%" height="15" fill="rgb(232,182,51)"/><text x="10.1005%" y="111.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (337 samples, 0.14%)</title><rect x="9.8341%" y="133" width="0.1378%" height="15" fill="rgb(231,60,39)"/><text x="10.0841%" y="143.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (309 samples, 0.13%)</title><rect x="9.8456%" y="117" width="0.1264%" height="15" fill="rgb(208,69,12)"/><text x="10.0956%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (1,558 samples, 0.64%)</title><rect x="10.8965%" y="117" width="0.6371%" height="15" fill="rgb(235,93,37)"/><text x="11.1465%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (1,724 samples, 0.70%)</title><rect x="17.9832%" y="69" width="0.7050%" height="15" fill="rgb(213,116,39)"/><text x="18.2332%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (21,973 samples, 8.98%)</title><rect x="12.1768%" y="101" width="8.9849%" height="15" fill="rgb(222,207,29)"/><text x="12.4268%" y="111.50">libsystem_mal..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (20,794 samples, 8.50%)</title><rect x="12.6589%" y="85" width="8.5028%" height="15" fill="rgb(206,96,30)"/><text x="12.9089%" y="95.50">libsystem_ma..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (5,981 samples, 2.45%)</title><rect x="18.7160%" y="69" width="2.4457%" height="15" fill="rgb(218,138,4)"/><text x="18.9660%" y="79.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (2,282 samples, 0.93%)</title><rect x="20.2285%" y="53" width="0.9331%" height="15" fill="rgb(250,191,14)"/><text x="20.4785%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (23,657 samples, 9.67%)</title><rect x="11.5336%" y="117" width="9.6734%" height="15" fill="rgb(239,60,40)"/><text x="11.7836%" y="127.50">libsystem_mall..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (287 samples, 0.12%)</title><rect x="21.2070%" y="117" width="0.1174%" height="15" fill="rgb(206,27,48)"/><text x="21.4570%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (3,665 samples, 1.50%)</title><rect x="22.1614%" y="101" width="1.4986%" height="15" fill="rgb(225,35,8)"/><text x="22.4114%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (3,230 samples, 1.32%)</title><rect x="22.3393%" y="85" width="1.3208%" height="15" fill="rgb(250,213,24)"/><text x="22.5893%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free (5,926 samples, 2.42%)</title><rect x="21.3244%" y="117" width="2.4232%" height="15" fill="rgb(247,123,22)"/><text x="21.5744%" y="127.50">li..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (3,664 samples, 1.50%)</title><rect x="29.2559%" y="85" width="1.4982%" height="15" fill="rgb(231,138,38)"/><text x="29.5059%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (18,906 samples, 7.73%)</title><rect x="23.7475%" y="117" width="7.7307%" height="15" fill="rgb(231,145,46)"/><text x="23.9975%" y="127.50">libsystem_m..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (11,287 samples, 4.62%)</title><rect x="26.8630%" y="101" width="4.6153%" height="15" fill="rgb(251,118,11)"/><text x="27.1130%" y="111.50">libsy..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (1,771 samples, 0.72%)</title><rect x="30.7541%" y="85" width="0.7242%" height="15" fill="rgb(217,147,25)"/><text x="31.0041%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,885 samples, 0.77%)</title><rect x="31.6868%" y="117" width="0.7708%" height="15" fill="rgb(247,81,37)"/><text x="31.9368%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (274 samples, 0.11%)</title><rect x="33.0211%" y="101" width="0.1120%" height="15" fill="rgb(209,12,38)"/><text x="33.2711%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (820 samples, 0.34%)</title><rect x="33.1536%" y="85" width="0.3353%" height="15" fill="rgb(227,1,9)"/><text x="33.4036%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (781 samples, 0.32%)</title><rect x="33.1695%" y="69" width="0.3194%" height="15" fill="rgb(248,47,43)"/><text x="33.4195%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (299 samples, 0.12%)</title><rect x="33.3666%" y="53" width="0.1223%" height="15" fill="rgb(221,10,30)"/><text x="33.6166%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (874 samples, 0.36%)</title><rect x="33.1331%" y="101" width="0.3574%" height="15" fill="rgb(210,229,1)"/><text x="33.3831%" y="111.50"></text></g><g><title>ray-tracer`&lt;ray_tracer::sphere::Sphere as ray_tracer::shape::Shape&gt;::local_intersect (2,543 samples, 1.04%)</title><rect x="32.4576%" y="117" width="1.0398%" height="15" fill="rgb(222,148,37)"/><text x="32.7076%" y="127.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (744 samples, 0.30%)</title><rect x="33.4974%" y="117" width="0.3042%" height="15" fill="rgb(234,67,33)"/><text x="33.7474%" y="127.50"></text></g><g><title>ray-tracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (76,589 samples, 31.32%)</title><rect x="5.1125%" y="165" width="31.3176%" height="15" fill="rgb(247,98,35)"/><text x="5.3625%" y="175.50">ray-tracer`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as ..</text></g><g><title>ray-tracer`ray_tracer::world::World::intersect_with_ray (72,218 samples, 29.53%)</title><rect x="6.8999%" y="149" width="29.5303%" height="15" fill="rgb(247,138,52)"/><text x="7.1499%" y="159.50">ray-tracer`ray_tracer::world::World::intersect_w..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (64,531 samples, 26.39%)</title><rect x="10.0431%" y="133" width="26.3870%" height="15" fill="rgb(213,79,30)"/><text x="10.2931%" y="143.50">ray-tracer`ray_tracer::shape::Shape::inter..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (6,417 samples, 2.62%)</title><rect x="33.8062%" y="117" width="2.6239%" height="15" fill="rgb(246,177,23)"/><text x="34.0562%" y="127.50">ra..</text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (2,276 samples, 0.93%)</title><rect x="35.4994%" y="101" width="0.9307%" height="15" fill="rgb(230,62,27)"/><text x="35.7494%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (260 samples, 0.11%)</title><rect x="37.0328%" y="149" width="0.1063%" height="15" fill="rgb(216,154,8)"/><text x="37.2828%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (392 samples, 0.16%)</title><rect x="37.8846%" y="133" width="0.1603%" height="15" fill="rgb(244,35,45)"/><text x="38.1346%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (756 samples, 0.31%)</title><rect x="40.9636%" y="85" width="0.3091%" height="15" fill="rgb(251,115,12)"/><text x="41.2136%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (9,522 samples, 3.89%)</title><rect x="38.2914%" y="117" width="3.8936%" height="15" fill="rgb(240,54,50)"/><text x="38.5414%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (8,950 samples, 3.66%)</title><rect x="38.5253%" y="101" width="3.6597%" height="15" fill="rgb(233,84,52)"/><text x="38.7753%" y="111.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (2,210 samples, 0.90%)</title><rect x="41.2813%" y="85" width="0.9037%" height="15" fill="rgb(207,117,47)"/><text x="41.5313%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (824 samples, 0.34%)</title><rect x="41.8481%" y="69" width="0.3369%" height="15" fill="rgb(249,43,39)"/><text x="42.0981%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (10,170 samples, 4.16%)</title><rect x="38.0449%" y="133" width="4.1586%" height="15" fill="rgb(209,38,44)"/><text x="38.2949%" y="143.50">libsy..</text></g><g><title>libsystem_malloc.dylib`szone_size (1,840 samples, 0.75%)</title><rect x="42.6929%" y="117" width="0.7524%" height="15" fill="rgb(236,212,23)"/><text x="42.9429%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (1,621 samples, 0.66%)</title><rect x="42.7824%" y="101" width="0.6628%" height="15" fill="rgb(242,79,21)"/><text x="43.0324%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free (3,002 samples, 1.23%)</title><rect x="42.2554%" y="133" width="1.2275%" height="15" fill="rgb(211,96,35)"/><text x="42.5054%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (1,570 samples, 0.64%)</title><rect x="45.9637%" y="101" width="0.6420%" height="15" fill="rgb(253,215,40)"/><text x="46.2137%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (8,476 samples, 3.47%)</title><rect x="43.4829%" y="133" width="3.4659%" height="15" fill="rgb(211,81,21)"/><text x="43.7329%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (4,762 samples, 1.95%)</title><rect x="45.0016%" y="117" width="1.9472%" height="15" fill="rgb(208,190,38)"/><text x="45.2516%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (839 samples, 0.34%)</title><rect x="46.6057%" y="101" width="0.3431%" height="15" fill="rgb(235,213,38)"/><text x="46.8557%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (959 samples, 0.39%)</title><rect x="47.0453%" y="133" width="0.3921%" height="15" fill="rgb(237,122,38)"/><text x="47.2953%" y="143.50"></text></g><g><title>ray-tracer`ray_tracer::intersection::Intersection::prepare_computations (28,482 samples, 11.65%)</title><rect x="36.5254%" y="165" width="11.6464%" height="15" fill="rgb(244,218,35)"/><text x="36.7754%" y="175.50">ray-tracer`ray_tr..</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::normal_at (26,352 samples, 10.78%)</title><rect x="37.3963%" y="149" width="10.7754%" height="15" fill="rgb(240,68,47)"/><text x="37.6463%" y="159.50">ray-tracer`ray_t..</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (1,638 samples, 0.67%)</title><rect x="47.5020%" y="133" width="0.6698%" height="15" fill="rgb(210,16,53)"/><text x="47.7520%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (569 samples, 0.23%)</title><rect x="47.9391%" y="117" width="0.2327%" height="15" fill="rgb(235,124,12)"/><text x="48.1891%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (359 samples, 0.15%)</title><rect x="48.6020%" y="149" width="0.1468%" height="15" fill="rgb(224,169,11)"/><text x="48.8520%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`default_zone_free_definite_size (563 samples, 0.23%)</title><rect x="48.7488%" y="149" width="0.2302%" height="15" fill="rgb(250,166,2)"/><text x="48.9988%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (563 samples, 0.23%)</title><rect x="49.2035%" y="133" width="0.2302%" height="15" fill="rgb(242,216,29)"/><text x="49.4535%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (492 samples, 0.20%)</title><rect x="49.2325%" y="117" width="0.2012%" height="15" fill="rgb(230,116,27)"/><text x="49.4825%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free (1,147 samples, 0.47%)</title><rect x="48.9790%" y="149" width="0.4690%" height="15" fill="rgb(228,99,48)"/><text x="49.2290%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (612 samples, 0.25%)</title><rect x="50.7393%" y="117" width="0.2502%" height="15" fill="rgb(253,11,6)"/><text x="50.9893%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (4,568 samples, 1.87%)</title><rect x="49.4480%" y="149" width="1.8679%" height="15" fill="rgb(247,143,39)"/><text x="49.6980%" y="159.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (2,723 samples, 1.11%)</title><rect x="50.2024%" y="133" width="1.1134%" height="15" fill="rgb(236,97,10)"/><text x="50.4524%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (798 samples, 0.33%)</title><rect x="50.9895%" y="117" width="0.3263%" height="15" fill="rgb(233,208,19)"/><text x="51.2395%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`malloc (277 samples, 0.11%)</title><rect x="51.3159%" y="149" width="0.1133%" height="15" fill="rgb(216,164,2)"/><text x="51.5659%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_free_definite_size (767 samples, 0.31%)</title><rect x="51.4291%" y="149" width="0.3136%" height="15" fill="rgb(220,129,5)"/><text x="51.6791%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (523 samples, 0.21%)</title><rect x="51.7607%" y="149" width="0.2139%" height="15" fill="rgb(242,17,10)"/><text x="52.0107%" y="159.50"></text></g><g><title>ray-tracer`__rdl_alloc (381 samples, 0.16%)</title><rect x="52.0846%" y="149" width="0.1558%" height="15" fill="rgb(242,107,0)"/><text x="52.3346%" y="159.50"></text></g><g><title>ray-tracer`__rdl_dealloc (408 samples, 0.17%)</title><rect x="52.2404%" y="149" width="0.1668%" height="15" fill="rgb(251,28,31)"/><text x="52.4904%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,853 samples, 0.76%)</title><rect x="52.6444%" y="101" width="0.7577%" height="15" fill="rgb(233,223,10)"/><text x="52.8944%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,738 samples, 0.71%)</title><rect x="52.6914%" y="85" width="0.7107%" height="15" fill="rgb(215,21,27)"/><text x="52.9414%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (568 samples, 0.23%)</title><rect x="53.1698%" y="69" width="0.2323%" height="15" fill="rgb(232,23,21)"/><text x="53.4198%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,973 samples, 0.81%)</title><rect x="52.5978%" y="117" width="0.8068%" height="15" fill="rgb(244,5,23)"/><text x="52.8478%" y="127.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (2,310 samples, 0.94%)</title><rect x="52.4792%" y="149" width="0.9446%" height="15" fill="rgb(226,81,46)"/><text x="52.7292%" y="159.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (2,112 samples, 0.86%)</title><rect x="52.5601%" y="133" width="0.8636%" height="15" fill="rgb(247,70,30)"/><text x="52.8101%" y="143.50"></text></g><g><title>ray-tracer`alloc::slice::merge_sort (267 samples, 0.11%)</title><rect x="53.4340%" y="149" width="0.1092%" height="15" fill="rgb(212,68,19)"/><text x="53.6840%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (2,234 samples, 0.91%)</title><rect x="54.9387%" y="133" width="0.9135%" height="15" fill="rgb(240,187,13)"/><text x="55.1887%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`set_tiny_meta_header_in_use (2,522 samples, 1.03%)</title><rect x="65.1229%" y="85" width="1.0313%" height="15" fill="rgb(223,113,26)"/><text x="65.3729%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (32,803 samples, 13.41%)</title><rect x="56.7952%" y="117" width="13.4133%" height="15" fill="rgb(206,192,2)"/><text x="57.0452%" y="127.50">libsystem_malloc.dyl..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (31,150 samples, 12.74%)</title><rect x="57.4711%" y="101" width="12.7374%" height="15" fill="rgb(241,108,4)"/><text x="57.7211%" y="111.50">libsystem_malloc.dy..</text></g><g><title>libsystem_malloc.dylib`tiny_malloc_from_free_list (9,826 samples, 4.02%)</title><rect x="66.1906%" y="85" width="4.0179%" height="15" fill="rgb(247,173,49)"/><text x="66.4406%" y="95.50">libs..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (4,020 samples, 1.64%)</title><rect x="68.5647%" y="69" width="1.6438%" height="15" fill="rgb(224,114,35)"/><text x="68.8147%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (35,269 samples, 14.42%)</title><rect x="55.8522%" y="133" width="14.4216%" height="15" fill="rgb(245,159,27)"/><text x="56.1022%" y="143.50">libsystem_malloc.dylib..</text></g><g><title>libsystem_malloc.dylib`default_zone_malloc (423 samples, 0.17%)</title><rect x="70.2739%" y="133" width="0.1730%" height="15" fill="rgb(245,172,44)"/><text x="70.5239%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (5,136 samples, 2.10%)</title><rect x="71.6314%" y="117" width="2.1001%" height="15" fill="rgb(236,23,11)"/><text x="71.8814%" y="127.50">l..</text></g><g><title>libsystem_malloc.dylib`tiny_size (4,514 samples, 1.85%)</title><rect x="71.8858%" y="101" width="1.8458%" height="15" fill="rgb(205,117,38)"/><text x="72.1358%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`free (8,305 samples, 3.40%)</title><rect x="70.4469%" y="133" width="3.3960%" height="15" fill="rgb(237,72,25)"/><text x="70.6969%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`tiny_size (272 samples, 0.11%)</title><rect x="73.7316%" y="117" width="0.1112%" height="15" fill="rgb(244,70,9)"/><text x="73.9816%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`tiny_free_list_add_ptr (5,382 samples, 2.20%)</title><rect x="81.9861%" y="101" width="2.2007%" height="15" fill="rgb(217,125,39)"/><text x="82.2361%" y="111.50">l..</text></g><g><title>libsystem_malloc.dylib`free_tiny (28,177 samples, 11.52%)</title><rect x="73.8428%" y="133" width="11.5217%" height="15" fill="rgb(235,36,10)"/><text x="74.0928%" y="143.50">libsystem_malloc...</text></g><g><title>libsystem_malloc.dylib`tiny_free_no_lock (17,282 samples, 7.07%)</title><rect x="78.2978%" y="117" width="7.0667%" height="15" fill="rgb(251,123,47)"/><text x="78.5478%" y="127.50">libsystem..</text></g><g><title>libsystem_malloc.dylib`tiny_free_list_remove_ptr (2,880 samples, 1.18%)</title><rect x="84.1869%" y="101" width="1.1776%" height="15" fill="rgb(221,13,13)"/><text x="84.4369%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (299 samples, 0.12%)</title><rect x="85.4009%" y="133" width="0.1223%" height="15" fill="rgb(238,131,9)"/><text x="85.6509%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (2,535 samples, 1.04%)</title><rect x="85.6769%" y="133" width="1.0366%" height="15" fill="rgb(211,50,8)"/><text x="85.9269%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (444 samples, 0.18%)</title><rect x="87.4098%" y="117" width="0.1816%" height="15" fill="rgb(245,182,24)"/><text x="87.6598%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (722 samples, 0.30%)</title><rect x="87.6045%" y="101" width="0.2952%" height="15" fill="rgb(242,14,37)"/><text x="87.8545%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (685 samples, 0.28%)</title><rect x="87.6196%" y="85" width="0.2801%" height="15" fill="rgb(246,228,12)"/><text x="87.8696%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (755 samples, 0.31%)</title><rect x="87.5914%" y="117" width="0.3087%" height="15" fill="rgb(213,55,15)"/><text x="87.8414%" y="127.50"></text></g><g><title>ray-tracer`&lt;ray_tracer::sphere::Sphere as ray_tracer::shape::Shape&gt;::local_intersect (2,918 samples, 1.19%)</title><rect x="86.7135%" y="133" width="1.1932%" height="15" fill="rgb(209,9,3)"/><text x="86.9635%" y="143.50"></text></g><g><title>ray-tracer`DYLD-STUB$$fma (1,064 samples, 0.44%)</title><rect x="87.9067%" y="133" width="0.4351%" height="15" fill="rgb(230,59,30)"/><text x="88.1567%" y="143.50"></text></g><g><title>ray-tracer`ray_tracer::world::World::color_at (216,148 samples, 88.38%)</title><rect x="3.6646%" y="181" width="88.3838%" height="15" fill="rgb(209,121,21)"/><text x="3.9146%" y="191.50">ray-tracer`ray_tracer::world::World::color_at</text></g><g><title>ray-tracer`ray_tracer::world::World::intersect_with_ray (107,189 samples, 43.83%)</title><rect x="48.2184%" y="165" width="43.8300%" height="15" fill="rgb(220,109,13)"/><text x="48.4684%" y="175.50">ray-tracer`ray_tracer::world::World::intersect_with_ray</text></g><g><title>ray-tracer`ray_tracer::shape::Shape::intersect (94,048 samples, 38.46%)</title><rect x="53.5918%" y="149" width="38.4566%" height="15" fill="rgb(232,18,1)"/><text x="53.8418%" y="159.50">ray-tracer`ray_tracer::shape::Shape::intersect</text></g><g><title>ray-tracer`ray_tracer::matrix::Matrix::multiply_tuple (9,056 samples, 3.70%)</title><rect x="88.3454%" y="133" width="3.7030%" height="15" fill="rgb(215,41,42)"/><text x="88.5954%" y="143.50">ray-..</text></g><g><title>libsystem_m.dylib`0x00007fff2a75e2f7 (3,205 samples, 1.31%)</title><rect x="90.7379%" y="117" width="1.3105%" height="15" fill="rgb(224,123,36)"/><text x="90.9879%" y="127.50"></text></g><g><title>ray-tracer`ray_tracer::camera::Camera::render (222,208 samples, 90.86%)</title><rect x="1.1920%" y="197" width="90.8618%" height="15" fill="rgb(240,125,3)"/><text x="1.4420%" y="207.50">ray-tracer`ray_tracer::camera::Camera::render</text></g><g><title>libsystem_kernel.dylib`write (361 samples, 0.15%)</title><rect x="93.4203%" y="181" width="0.1476%" height="15" fill="rgb(205,98,50)"/><text x="93.6703%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`szone_size (509 samples, 0.21%)</title><rect x="93.6861%" y="165" width="0.2081%" height="15" fill="rgb(205,185,37)"/><text x="93.9361%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`tiny_size (466 samples, 0.19%)</title><rect x="93.7037%" y="149" width="0.1905%" height="15" fill="rgb(238,207,15)"/><text x="93.9537%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`free (821 samples, 0.34%)</title><rect x="93.5679%" y="181" width="0.3357%" height="15" fill="rgb(213,199,42)"/><text x="93.8179%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`free_tiny (935 samples, 0.38%)</title><rect x="93.9543%" y="181" width="0.3823%" height="15" fill="rgb(235,201,11)"/><text x="94.2043%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (328 samples, 0.13%)</title><rect x="94.3428%" y="181" width="0.1341%" height="15" fill="rgb(207,46,11)"/><text x="94.5928%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (443 samples, 0.18%)</title><rect x="94.9729%" y="133" width="0.1811%" height="15" fill="rgb(241,35,35)"/><text x="95.2229%" y="143.50"></text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (782 samples, 0.32%)</title><rect x="94.8376%" y="149" width="0.3198%" height="15" fill="rgb(243,32,47)"/><text x="95.0876%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (267 samples, 0.11%)</title><rect x="96.5276%" y="101" width="0.1092%" height="15" fill="rgb(247,202,23)"/><text x="96.7776%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`szone_malloc_should_clear (1,629 samples, 0.67%)</title><rect x="96.9324%" y="53" width="0.6661%" height="15" fill="rgb(219,102,11)"/><text x="97.1824%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`tiny_malloc_should_clear (1,512 samples, 0.62%)</title><rect x="96.9802%" y="37" width="0.6183%" height="15" fill="rgb(243,110,44)"/><text x="97.2302%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`_malloc_zone_malloc (1,848 samples, 0.76%)</title><rect x="96.8514%" y="69" width="0.7557%" height="15" fill="rgb(222,74,54)"/><text x="97.1014%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`szone_realloc (306 samples, 0.13%)</title><rect x="97.7281%" y="37" width="0.1251%" height="15" fill="rgb(216,99,12)"/><text x="97.9781%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`malloc_zone_realloc (456 samples, 0.19%)</title><rect x="97.6697%" y="53" width="0.1865%" height="15" fill="rgb(226,22,26)"/><text x="97.9197%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`realloc (768 samples, 0.31%)</title><rect x="97.6226%" y="69" width="0.3140%" height="15" fill="rgb(217,163,10)"/><text x="97.8726%" y="79.50"></text></g><g><title>ray-tracer`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3,254 samples, 1.33%)</title><rect x="96.6368%" y="101" width="1.3306%" height="15" fill="rgb(213,25,53)"/><text x="96.8868%" y="111.50"></text></g><g><title>ray-tracer`alloc::raw_vec::finish_grow (2,951 samples, 1.21%)</title><rect x="96.7607%" y="85" width="1.2067%" height="15" fill="rgb(252,105,26)"/><text x="97.0107%" y="95.50"></text></g><g><title>ray-tracer`&lt;&amp;mut W as core::fmt::Write&gt;::write_str (3,914 samples, 1.60%)</title><rect x="96.3767%" y="117" width="1.6005%" height="15" fill="rgb(220,39,43)"/><text x="96.6267%" y="127.50"></text></g><g><title>ray-tracer`core::fmt::Formatter::write_formatted_parts (4,626 samples, 1.89%)</title><rect x="96.1003%" y="133" width="1.8916%" height="15" fill="rgb(229,68,48)"/><text x="96.3503%" y="143.50">r..</text></g><g><title>ray-tracer`core::fmt::float::float_to_decimal_common_shortest (11,439 samples, 4.68%)</title><rect x="95.2637%" y="149" width="4.6775%" height="15" fill="rgb(252,8,32)"/><text x="95.5137%" y="159.50">ray-t..</text></g><g><title>ray-tracer`core::num::flt2dec::strategy::grisu::format_shortest_opt (4,767 samples, 1.95%)</title><rect x="97.9919%" y="133" width="1.9492%" height="15" fill="rgb(223,20,43)"/><text x="98.2419%" y="143.50">r..</text></g><g><title>ray-tracer`alloc::fmt::format (13,420 samples, 5.49%)</title><rect x="94.4769%" y="181" width="5.4875%" height="15" fill="rgb(229,81,49)"/><text x="94.7269%" y="191.50">ray-tra..</text></g><g><title>ray-tracer`core::fmt::write (13,001 samples, 5.32%)</title><rect x="94.6483%" y="165" width="5.3162%" height="15" fill="rgb(236,28,36)"/><text x="94.8983%" y="175.50">ray-tra..</text></g><g><title>ray-tracer`ray_tracer::canvas::Canvas::save_file (19,396 samples, 7.93%)</title><rect x="92.0538%" y="197" width="7.9311%" height="15" fill="rgb(249,185,26)"/><text x="92.3038%" y="207.50">ray-tracer`..</text></g><g><title>all (244,556 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(249,174,33)"/><text x="0.2500%" y="335.50"></text></g><g><title>0x1 (244,556 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(233,201,37)"/><text x="0.2500%" y="319.50">0x1</text></g><g><title>libdyld.dylib`start (244,556 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(221,78,26)"/><text x="0.2500%" y="303.50">libdyld.dylib`start</text></g><g><title>ray-tracer`main (244,556 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(250,127,30)"/><text x="0.2500%" y="287.50">ray-tracer`main</text></g><g><title>ray-tracer`std::rt::lang_start_internal (244,556 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(230,49,44)"/><text x="0.2500%" y="271.50">ray-tracer`std::rt::lang_start_internal</text></g><g><title>ray-tracer`std::rt::lang_start::_{{closure}} (244,556 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(229,67,23)"/><text x="0.2500%" y="255.50">ray-tracer`std::rt::lang_start::_{{closure}}</text></g><g><title>ray-tracer`std::sys_common::backtrace::__rust_begin_short_backtrace (244,556 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(249,83,47)"/><text x="0.2500%" y="239.50">ray-tracer`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>ray-tracer`ray_tracer::demo::demo (244,556 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(215,43,3)"/><text x="0.2500%" y="223.50">ray-tracer`ray_tracer::demo::demo</text></g></svg></svg>